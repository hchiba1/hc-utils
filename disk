#!/usr/bin/perl -w
use strict;
use File::Basename;
use Getopt::Std;
my $PROGRAM = basename $0;
my $USAGE=
"Usage: $PROGRAM
-o: other disks (tmpfs and squashfs)
-a: all
";

my %OPT;
getopts('oa', \%OPT);

my $COMMAND = "df -h";
if ($^O eq "linux") {
    $COMMAND .= " -T"
}

my @line = `$COMMAND @ARGV`;
chomp(@line);
    
print change_columns(sort_by_size(@line));

################################################################################
### Functions ##################################################################
################################################################################

sub sort_by_size {
    my @line = @_;

    my $pos = get_column_end_pos($line[0], "Size");

    my @size = ();
    for (my $i=1; $i<@line; $i++) {
	my $columns = substr($line[$i], 0, $pos);
	if ($columns =~ /.* (\S+)$/) {
	    my $size = $1;
	    $size[$i] = get_size($size, 1024);
	} else {
	    die;
	}
    }

    my @order = sort { $size[$b]<=>$size[$a] } 1..$#line;
    
    my @out = ($line[0]);
    for my $i (@order) {
	push @out, $line[$i];
    }

    return @out;
}

sub change_columns {
    my (@line) = @_;

    my $size_pos = get_column_end_pos($line[0], "Size");
    my $used_pos = get_column_end_pos($line[0], "Used");
    my $avail_pos = get_column_end_pos($line[0], "Avail");
    my $mounted_pos = get_column_start_pos($line[0], "Mounted on");

    my $max_len = length($line[1]);
    my $device_len = length($line[1]);
    for (my $i=1; $i<@line; $i++) {
	my $columns = substr($line[$i], 0, $size_pos);
	if ($columns =~ /(.* )\S+$/) {
	    my $pref = $1;
	    if (length($pref) < $device_len) {
		$device_len = length($pref);
	    }
	    if (length($line[$i]) > $max_len) {
		$max_len = length($line[$i]);
	    }
	} else {
	    die;
	}
    }

    my @out = ();
    for (my $i=0; $i<@line; $i++) {
	my $device = substr($line[$i], 0, $device_len);
	my $size = substr($line[$i], $device_len, $size_pos - $device_len);
	my $used = substr($line[$i], $size_pos, $used_pos - $size_pos);
	my $avail = substr($line[$i], $used_pos, $avail_pos - $used_pos);
	my $percent = substr($line[$i], $avail_pos, $mounted_pos - $avail_pos);
	my $mounted = substr($line[$i], $mounted_pos);
	my $padd = " " x ($max_len - length($line[$i]) + 1);
	$device =~ s/ +$//;
        if (!$OPT{a} && !$OPT{o}) {
            if ($device =~ /tmpfs|squashfs/) {
                next;
            }
        }
        if ($OPT{o}) {
            if ($device !~ /tmpfs|squashfs/ && $device !~ /^Filesystem/) {
                next;
            }
        }
	push @out, "${mounted}${padd}${size}${used}${percent}${device}\n";
    }

    return @out;
}

sub get_column_start_pos {
    my ($line, $column) = @_;
    
    my $column_pos;
    if ($line =~ /^(.* +)$column/) {
	$column_pos = length($1);
    } else {
	die;
    }

    return $column_pos;
}

sub get_column_end_pos {
    my ($line, $column) = @_;
    
    my $column_pos;
    if ($line =~ /^(.* +$column)/) {
	$column_pos = length($1);
    } else {
	die;
    }

    return $column_pos;
}

sub get_size {
    my ($size, $base) = @_;

    if ($size =~ /(\S*\d)(\S+)/) {
	my ($num, $unit) = ($1, $2);
	return get_multiplied_size($num, $unit, $base);
    } else {
	return $size;
    }
}

sub get_multiplied_size {
    my ($num, $unit, $base) = @_;
    
    my $multiple = 1;

    if ($unit =~ /K/) {
	$multiple *= $base
    } elsif ($unit =~ /M/) {
	$multiple *= $base ** 2
    } elsif ($unit =~ /G/) {
	$multiple *= $base ** 3
    } elsif ($unit =~ /T/) {
	$multiple *= $base ** 4
    } elsif ($unit =~ /P/) {
	$multiple *= $base ** 5
    }

    return $num * $multiple;
}
