#!/usr/bin/perl -w
use strict;
use File::Basename;
use Getopt::Std;
use File::Path;
use Digest::SHA 'sha256_hex';
use HTTP::Date 'str2time', 'time2iso';
my $PROGRAM = basename $0;
my $USAGE=
"Usage: $PROGRAM [OPTIONS] URL
";

my $COMMAND = "curl --max-time 100000 -LfsS";

my %OPT;
getopts('', \%OPT);

### get URL
if (@ARGV != 1) {
    print STDERR $USAGE;
    exit 1;
}
my ($URL) = @ARGV;
$URL =~ s/^ftp:\/\///;

if ($URL =~ /^(.*\/)(\S.+)$/) {
    my ($dir, $local_name) = ($1, $2);

    if (!-e $local_name) {
        system "$COMMAND -OR $URL";
    }
    while (1) {
        check_update($dir, $local_name);
        sleep 3600;
    }
}

################################################################################
### Function ###################################################################
################################################################################

sub check_update {
    my ($dir, $local_name) = @_;

    my @list = `$COMMAND $dir`;
    chomp(@list);

    my $local_day = get_local_day($local_name);

    for my $line (@list) {
        if ($line =~ /^(.*?) +(\d+) +(\S+) +(\S+) +(\d+) (\S+ +\S+ +\S+) (.*)/) {
            my ($perm, $num, $group, $user, $size, $date, $name) = ($1, $2, $3, $4, $5, $6, $7);
            if ($local_name eq $name && $local_day ne get_day($date)) {
                system "bak -f $local_name";
                system "$COMMAND -OR $URL";
            }
        }
    }
}

sub get_day {
    my ($date) = @_;

    my $time = time2iso(str2time($date, "GMT"));
    $time =~ s/:00$//;
    if ($time =~ /^(\S+) \S+$/) {
        return $1;
    } else {
        die $time;
    }
}

sub get_local_day {
    my ($file) = @_;

    my @stat = stat $file;
    my $time = time2iso($stat[9]);
    if ($time =~ /^(\S+) \S+$/) {
        return $1;
    } else {
        die $time;
    }
}
