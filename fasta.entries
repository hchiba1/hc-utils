#!/usr/bin/perl -w
use strict;
use Getopt::Std;
use File::Basename;
my $program = basename $0;

my $usage = 
"Usage: $program [FILE ...]
If file not specified, read from STDIN.
-d DELIM : delimiter ('>' by default)
-D : use 1st line as delimiter
-p PATTERN: regular expression pattern to search
-l : output length of each entry
";

my %opt;
getopts('d:Dp:l',\%opt);

my $sep = $opt{d} || "\n>";
if ($opt{D}) {
    $sep = <>;
}
$/= $sep;

STDOUT->autoflush;
my $count = 0;
my $first_line = 1;
(my $without_newlines = $sep) =~ s/^\n*//;
while(<>){
    chomp;
    if ($first_line) {
	s/^$without_newlines//;
	$first_line = 0;
    }
    if (!$opt{p} || /$opt{p}/) {
        my @line = split("\n", $_);
        if ($opt{l}) {
            if ($line[0] =~ /^(\S+)\s/) {
                print $1, "\t", get_seq_len($_), "\n";
            } else {
                die;
            }
        } else {
            print $line[0], "\n";
        }
        $count ++;
    }
}

exit $count;

################################################################################
### Function ###################################################################
################################################################################
sub get_seq_len {
    my ($entry) = @_;

    my @line = split("\n", $entry, -1);
    if (@line < 2) {
        die "no content in entry: $entry";
    }

    my $new_line_chars = @line - 1;
    return length($entry) - length($line[0]) - $new_line_chars;

    # my $len = 0;
    # for (my $i=1; $i<@line; $i++) {
    #     $len += length($line[$i]);
    # }
    # return $len;

}
