#!/usr/bin/perl -w
use strict;
use File::Basename;
use Getopt::Std;
my $PROGRAM = basename $0;
my $USAGE=
"Usage: $PROGRAM
-o: show object IDs
-s: sort by date time and type
-t: align_column
-L NUM: tail -n NUM logfiles
-m: show commit message
";

my %OPT;
getopts('ostL:m', \%OPT);

my $fh;
if ($OPT{s} && $OPT{t}) {
    open($fh, "| sort -k6,7 -k8.5,8.5 | align_column") || die;
} elsif ($OPT{s}) {
    open($fh, "| sort -k6,7 -k8.5,8.5") || die;
} elsif ($OPT{t}) {
    open($fh, "| align_column") || die;
} else {
    $fh = *STDOUT;
}

my %NAME = ();
for my $index (`git ls-files --stage`) {
    chomp($index);
    my ($prefix, $file) = split("\t", $index);
    my ($permisson, $object, $num) = split(/\s+/, $prefix);
    if ($num) {
        $NAME{$object} = "$file($num)";
    } else {
        $NAME{$object} = "$file";
    }
}

my @FILE = (
    ".git/[A-Z]*",
    ".git/index",
    ".git/objects/*/*",
    ".git/logs/HEAD",
    ".git/logs/refs/*/*",
    ".git/logs/refs/*/*/*",
    ".git/refs/*/*",
    ".git/refs/*/*/*"
    );
my $LS_COMMND = "ls -lF --full-time -rtd @FILE 2>/dev/null | sed 's/\\.[0-9]\\+ \\S\\+//'";
if ($^O =~ /^darwin/) {
    $LS_COMMND = "ll -rtd @FILE";
}
my @LINE = `$LS_COMMND`;
chomp(@LINE);

my %REFS = ();
my %CHECK_REFS = ();
my %HEAD;
for my $line (@LINE) {
    if ($line !~ /\/$/ && $line !~ /tags/ && $line !~ /index/ && $line !~ /objects/ && $line !~ /logs/) {
        my @f = split(/\s+/, $line);
        my $file = $f[7];
        my $contents = `cat $file`;
        chomp($contents);
        if ($contents) {
            my @content = split("\n", $contents);
            my @col = split(/\t/, $content[0]);
            add_ref($col[0], $file);
        }
    }
}

my $INDEX = "";
my $LEN;
my $LOG_FILES;
for my $line (@LINE) {
    if ($line =~ /^(.+)(.git\/objects\/\w\w\/.*)$/) {
        my ($prefix, $suffix) = ($1, $2);
        my $object = $suffix;
        $object =~ s|^.git/objects/||;
        $object =~ s|/||;
        my $type = get_type($object);
        print $fh "$prefix\[$type\]\t";
        if ($OPT{o}) {
            print $fh "$object";
        } else {
            print $fh "$suffix";
        }
        print_object_refs($fh, $object);
        if ($OPT{m} and $type eq "history") {
            print_commit_message($fh, $object);
        }
        print $fh "\n";
    } elsif ($line =~ /^(.+)(.git\/objects\/pack\/pack-(.*))$/) {
        my ($prefix, $suffix, $object) = ($1, $2, $3);
        if ($OPT{o}) {
            print $fh "$prefix\[pack\]\t$object\n";
        } else {
            print $fh "$prefix\[pack\]\t$suffix\n";
        }
    } elsif ($line !~ /\/$/ && $line =~ /logs/) {
        $LOG_FILES .= "$line\n";
    } elsif ($line !~ /\/$/ && $line !~ /tags/) {
        if ($line =~ /index/) {
            $INDEX = $line;
        } else {
            save_len($line);
            print $fh "$line";
            my @f = split(/\s+/, $line);
            my $file = $f[7];
            my $contents = `cat $file`;
            chomp($contents);
            if ($contents) {
                my @content = split("\n", $contents);
                my $content = $content[0];
                $content =~ s/\t/    /g;
                if (@content == 1) {
                    print $fh "\t$content";
                } else {
                    print $fh "\t\"$content\" ...";
                }
            }
            print $fh "\n";
        }
    }
}

if ($OPT{t} || $OPT{s}) {
    close($fh);
}

if ($INDEX) {
    print "\n";
    print $INDEX;
    if ($OPT{t}) {
        my $pad_len = 0;
        if ($LEN > length($INDEX)) {
            $pad_len = $LEN - length($INDEX);
        }
        print " " x ($pad_len + 2);
    } else {
        print "\t";
    }
    print scalar(keys %NAME), " files\n";
}

if ($OPT{L}) {
    for my $line (@LINE) {
        if ($line =~ /logs/ && $line !~ /\/$/) {
            print "\n";
            print "$line\n";
            my @f = split(/\s+/, $line);
            my $file = $f[7];
            system "tail -n $OPT{L} $file";
        }
    }
} elsif ($LOG_FILES) {
    print "\n";
    print "$LOG_FILES\n";
}

################################################################################
### Functions ##################################################################
################################################################################
sub get_type {
    my ($object) = @_;

    my $type = `git cat-file -t $object`;
    chomp($type);

    if ($type eq "blob") {
        return "file";
    } elsif ($type eq "tree") {
        return "directory";
    } elsif ($type eq "commit") {
        return "history";
    } elsif ($type eq "tag") {
        return "tag";
    } else {
        return "";
    }
}

sub add_ref {
    my ($content, $ref) = @_;

    if ($content =~ /ref: refs\/heads\/(\S+)/) {
        my $branch = $1;
        $HEAD{$branch} = 1;
    }

    $ref =~ s|\.git/refs/heads/||;
    $ref =~ s|\.git/refs/remotes/||;
    $ref =~ s|\.git/refs/remotes/||;
    $ref =~ s|\.git/||;
    if (!$CHECK_REFS{$content}{$ref}) {
        if ($REFS{$content}) {
            push @{$REFS{$content}}, $ref;
        } else {
            $REFS{$content} = [$ref];
        }
        $CHECK_REFS{$content}{$ref} = 1;
    }
}

sub print_object_refs {
    my ($fh, $object) = @_;

    if ($REFS{$object}) {
        my @ref = @{$REFS{$object}};
        my $refs = join(", ", @ref);
        print $fh " ($refs)";
        for my $ref (@ref) {
            if ($HEAD{$ref}) {
                print $fh " <- HEAD";
            }
        }
    }
    if ($NAME{$object}) {
        my $name = $NAME{$object};
        print $fh " $name";
    }
}

sub print_commit_message {
    my ($fh, $object) = @_;

    my @line = `git cat-file -p $object`;
    chomp(@line);
    my $PREV_LINE;
    for my $line (@line) {
        if (defined $PREV_LINE and $PREV_LINE eq "") {
            print $fh " \'$line\'";
        }
        $PREV_LINE = $line;
    }
}

sub save_len {
    my ($out) = @_;

    my $len = length($out);
    if (!defined($LEN) || $len > $LEN) {
        $LEN = $len;
    }
}
